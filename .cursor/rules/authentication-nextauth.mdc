---
description: 
globs: 
alwaysApply: true
---
# NextAuth.js Authentication Best Practices

## Setup and Configuration

### Installation
```bash
pnpm add next-auth @auth/supabase-adapter
```

### Environment Variables
```env
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-secret-key # Generate with: openssl rand -base64 32
TWITTER_CLIENT_ID=your-twitter-client-id
TWITTER_CLIENT_SECRET=your-twitter-client-secret
```

### Auth Configuration
```tsx
// app/api/auth/[...nextauth]/route.ts
import NextAuth from 'next-auth'
import TwitterProvider from 'next-auth/providers/twitter'
import { SupabaseAdapter } from '@auth/supabase-adapter'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

const handler = NextAuth({
  providers: [
    TwitterProvider({
      clientId: process.env.TWITTER_CLIENT_ID!,
      clientSecret: process.env.TWITTER_CLIENT_SECRET!,
      version: "2.0",
    })
  ],
  adapter: SupabaseAdapter({
    url: process.env.NEXT_PUBLIC_SUPABASE_URL!,
    secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,
  }),
  callbacks: {
    async session({ session, token, user }) {
      // Add custom fields to session
      if (session?.user) {
        session.user.id = user.id
        session.user.username = user.username
      }
      return session
    },
    async jwt({ token, user, account, profile }) {
      if (user) {
        token.id = user.id
        token.username = profile?.username
      }
      return token
    }
  },
  pages: {
    signIn: '/login',
    signOut: '/logout',
    error: '/auth/error',
  },
  session: {
    strategy: 'jwt',
  },
})

export { handler as GET, handler as POST }
```

## Session Management

### Server Component Session
```tsx
// app/components/user-nav.tsx
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'

export default async function UserNav() {
  const session = await getServerSession(authOptions)
  
  if (!session) {
    return <LoginButton />
  }
  
  return (
    <div>
      <Avatar src={session.user?.image} />
      <span>{session.user?.name}</span>
    </div>
  )
}
```

### Client Component Session
```tsx
'use client'

import { useSession } from 'next-auth/react'

export default function ClientComponent() {
  const { data: session, status } = useSession()
  
  if (status === 'loading') {
    return <Skeleton />
  }
  
  if (status === 'unauthenticated') {
    return <SignInButton />
  }
  
  return <div>Welcome {session?.user?.name}</div>
}
```

### Session Provider
```tsx
// app/providers.tsx
'use client'

import { SessionProvider } from 'next-auth/react'

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <SessionProvider>
      {children}
    </SessionProvider>
  )
}

// app/layout.tsx
import { Providers } from './providers'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <Providers>{children}</Providers>
      </body>
    </html>
  )
}
```

## Authentication Components

### Sign In Button
```tsx
'use client'

import { signIn } from 'next-auth/react'
import { Button } from '@/components/ui/button'

export function SignInButton() {
  return (
    <Button
      onClick={() => signIn('twitter', { callbackUrl: '/dashboard' })}
      variant="default"
    >
      <TwitterIcon className="mr-2 h-4 w-4" />
      Connect with X
    </Button>
  )
}
```

### Sign Out Button
```tsx
'use client'

import { signOut } from 'next-auth/react'
import { Button } from '@/components/ui/button'

export function SignOutButton() {
  return (
    <Button
      onClick={() => signOut({ callbackUrl: '/' })}
      variant="outline"
    >
      Disconnect
    </Button>
  )
}
```

## Protected Routes

### Middleware Protection
```tsx
// middleware.ts
import { withAuth } from 'next-auth/middleware'
import { NextResponse } from 'next/server'

export default withAuth(
  function middleware(req) {
    // Custom logic here
    return NextResponse.next()
  },
  {
    callbacks: {
      authorized: ({ token }) => !!token
    },
  }
)

export const config = {
  matcher: ['/dashboard/:path*', '/api/protected/:path*']
}
```

### Page-Level Protection
```tsx
// app/dashboard/page.tsx
import { getServerSession } from 'next-auth'
import { redirect } from 'next/navigation'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'

export default async function DashboardPage() {
  const session = await getServerSession(authOptions)
  
  if (!session) {
    redirect('/login')
  }
  
  return <Dashboard user={session.user} />
}
```

## Custom Hooks

### useRequireAuth Hook
```tsx
// hooks/useRequireAuth.ts
'use client'

import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'

export function useRequireAuth() {
  const { data: session, status } = useSession()
  const router = useRouter()
  
  useEffect(() => {
    if (status === 'loading') return
    if (!session) router.push('/login')
  }, [session, status, router])
  
  return { session, status }
}
```

## API Route Protection
```tsx
// app/api/protected/route.ts
import { getServerSession } from 'next-auth'
import { NextResponse } from 'next/server'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'

export async function GET() {
  const session = await getServerSession(authOptions)
  
  if (!session) {
    return NextResponse.json(
      { error: 'Unauthorized' },
      { status: 401 }
    )
  }
  
  return NextResponse.json({ data: 'Protected data' })
}
```

## Type Safety

### Extending Session Types
```tsx
// types/next-auth.d.ts
import { DefaultSession } from 'next-auth'

declare module 'next-auth' {
  interface Session {
    user: {
      id: string
      username?: string
    } & DefaultSession['user']
  }
  
  interface User {
    username?: string
  }
}

declare module 'next-auth/jwt' {
  interface JWT {
    id: string
    username?: string
  }
}
```

## Best Practices
- Always use NEXTAUTH_SECRET in production
- Implement proper error pages
- Use JWT strategy for better performance
- Add rate limiting to auth endpoints
- Log authentication events
- Implement account linking for multiple providers
- Use secure session cookies
- Handle token refresh for OAuth providers
- Validate and sanitize profile data
- Implement proper CSRF protection
