---
description: 
globs: 
alwaysApply: true
---
# Supabase Realtime Best Practices

## Overview
Supabase Realtime enables real-time features through WebSockets, including Presence (track online users), Broadcast (send messages), and Postgres Changes (database updates).

## Setup and Configuration

### Installation
```bash
pnpm add @supabase/supabase-js
```

### Client Configuration with Realtime
```tsx
// lib/supabase/realtime-client.ts
import { createBrowserClient } from '@supabase/ssr'

export function createRealtimeClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      realtime: {
        params: {
          eventsPerSecond: 10
        }
      }
    }
  )
}
```

## Presence (User Tracking)

### Track Online Users with Cursor Position
```tsx
// hooks/usePresence.ts
'use client'

import { useEffect, useState } from 'react'
import { createRealtimeClient } from '@/lib/supabase/realtime-client'
import { RealtimeChannel } from '@supabase/supabase-js'

interface UserPresence {
  user_id: string
  username: string
  avatar: string
  cursor: { x: number; y: number }
  lastSeen: string
}

export function usePresence(roomId: string, currentUser: UserPresence) {
  const [onlineUsers, setOnlineUsers] = useState<Record<string, UserPresence>>({})
  const [channel, setChannel] = useState<RealtimeChannel | null>(null)
  
  useEffect(() => {
    const supabase = createRealtimeClient()
    
    const presenceChannel = supabase.channel(`room:${roomId}`, {
      config: {
        presence: {
          key: currentUser.user_id,
        },
      },
    })
    
    presenceChannel
      .on('presence', { event: 'sync' }, () => {
        const state = presenceChannel.presenceState()
        const users: Record<string, UserPresence> = {}
        
        Object.entries(state).forEach(([key, presences]) => {
          // Get the most recent presence
          const presence = Array.isArray(presences) ? presences[0] : presences
          users[key] = presence as UserPresence
        })
        
        setOnlineUsers(users)
      })
      .on('presence', { event: 'join' }, ({ key, newPresences }) => {
        console.log('User joined:', key)
      })
      .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {
        console.log('User left:', key)
      })
      .subscribe(async (status) => {
        if (status === 'SUBSCRIBED') {
          await presenceChannel.track(currentUser)
        }
      })
    
    setChannel(presenceChannel)
    
    return () => {
      presenceChannel.unsubscribe()
    }
  }, [roomId, currentUser.user_id])
  
  const updateCursor = async (x: number, y: number) => {
    if (channel) {
      await channel.track({
        ...currentUser,
        cursor: { x, y },
        lastSeen: new Date().toISOString()
      })
    }
  }
  
  return { onlineUsers, updateCursor }
}
```

### Floating Cursor Component
```tsx
// components/features/floating-cursors.tsx
'use client'

import { useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Avatar } from '@/components/ui/avatar'

interface FloatingCursorsProps {
  users: Record<string, UserPresence>
  currentUserId: string
}

export function FloatingCursors({ users, currentUserId }: FloatingCursorsProps) {
  return (
    <AnimatePresence>
      {Object.entries(users).map(([userId, user]) => {
        if (userId === currentUserId) return null
        
        return (
          <motion.div
            key={userId}
            className="fixed pointer-events-none z-50"
            initial={{ opacity: 0, scale: 0 }}
            animate={{ 
              opacity: 1, 
              scale: 1,
              x: user.cursor.x,
              y: user.cursor.y
            }}
            exit={{ opacity: 0, scale: 0 }}
            transition={{ type: "spring", damping: 30, stiffness: 200 }}
          >
            <div className="relative">
              <Avatar className="h-8 w-8 border-2 border-primary">
                <img src={user.avatar} alt={user.username} />
              </Avatar>
              <div className="absolute -bottom-6 left-1/2 -translate-x-1/2 whitespace-nowrap">
                <span className="text-xs bg-black/80 text-white px-2 py-1 rounded">
                  {user.username}
                </span>
              </div>
            </div>
          </motion.div>
        )
      })}
    </AnimatePresence>
  )
}
```

## Broadcast (Real-time Chat)

### Chat Hook
```tsx
// hooks/useChat.ts
'use client'

import { useEffect, useState, useCallback } from 'react'
import { createRealtimeClient } from '@/lib/supabase/realtime-client'
import { RealtimeChannel } from '@supabase/supabase-js'

interface ChatMessage {
  id: string
  user_id: string
  username: string
  avatar: string
  message: string
  timestamp: string
}

export function useChat(roomId: string, currentUser: { id: string; username: string; avatar: string }) {
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [channel, setChannel] = useState<RealtimeChannel | null>(null)
  
  useEffect(() => {
    const supabase = createRealtimeClient()
    
    const chatChannel = supabase.channel(`chat:${roomId}`)
    
    chatChannel
      .on('broadcast', { event: 'new-message' }, ({ payload }) => {
        setMessages(prev => [...prev, payload as ChatMessage])
      })
      .subscribe()
    
    setChannel(chatChannel)
    
    return () => {
      chatChannel.unsubscribe()
    }
  }, [roomId])
  
  const sendMessage = useCallback(async (message: string) => {
    if (!channel) return
    
    const chatMessage: ChatMessage = {
      id: crypto.randomUUID(),
      user_id: currentUser.id,
      username: currentUser.username,
      avatar: currentUser.avatar,
      message,
      timestamp: new Date().toISOString()
    }
    
    await channel.send({
      type: 'broadcast',
      event: 'new-message',
      payload: chatMessage
    })
  }, [channel, currentUser])
  
  return { messages, sendMessage }
}
```

### Chat Component
```tsx
// components/features/chat-widget.tsx
'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { MessageCircle, X, Send } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Avatar } from '@/components/ui/avatar'

interface ChatWidgetProps {
  messages: ChatMessage[]
  onSendMessage: (message: string) => void
  currentUserId: string
}

export function ChatWidget({ messages, onSendMessage, currentUserId }: ChatWidgetProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [input, setInput] = useState('')
  
  const handleSend = () => {
    if (input.trim()) {
      onSendMessage(input)
      setInput('')
    }
  }
  
  return (
    <>
      {/* Chat Toggle Button */}
      <motion.div
        className="fixed bottom-6 right-6 z-40"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <Button
          size="icon"
          className="h-14 w-14 rounded-full shadow-lg"
          onClick={() => setIsOpen(!isOpen)}
        >
          {isOpen ? <X /> : <MessageCircle />}
        </Button>
      </motion.div>
      
      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.95 }}
            className="fixed bottom-24 right-6 w-96 h-[500px] bg-card border rounded-lg shadow-xl z-40 flex flex-col"
          >
            {/* Header */}
            <div className="p-4 border-b">
              <h3 className="font-semibold">Live Chat</h3>
              <p className="text-sm text-muted-foreground">
                {Object.keys(messages).length} participants
              </p>
            </div>
            
            {/* Messages */}
            <ScrollArea className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((msg) => (
                  <div
                    key={msg.id}
                    className={`flex gap-3 ${
                      msg.user_id === currentUserId ? 'flex-row-reverse' : ''
                    }`}
                  >
                    <Avatar className="h-8 w-8">
                      <img src={msg.avatar} alt={msg.username} />
                    </Avatar>
                    <div
                      className={`flex-1 ${
                        msg.user_id === currentUserId ? 'text-right' : ''
                      }`}
                    >
                      <p className="text-sm font-medium">{msg.username}</p>
                      <p
                        className={`text-sm p-2 rounded-lg inline-block ${
                          msg.user_id === currentUserId
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-muted'
                        }`}
                      >
                        {msg.message}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </ScrollArea>
            
            {/* Input */}
            <div className="p-4 border-t flex gap-2">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                placeholder="Type a message..."
                className="flex-1"
              />
              <Button size="icon" onClick={handleSend}>
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
}
```

## Postgres Changes (Database Sync)

### Listen to Database Changes
```tsx
// hooks/useRealtimeUpdates.ts
'use client'

import { useEffect } from 'react'
import { createRealtimeClient } from '@/lib/supabase/realtime-client'

export function useRealtimeUpdates(
  table: string,
  filter?: { column: string; value: string },
  onInsert?: (payload: any) => void,
  onUpdate?: (payload: any) => void,
  onDelete?: (payload: any) => void
) {
  useEffect(() => {
    const supabase = createRealtimeClient()
    
    const channel = supabase
      .channel(`db-changes-${table}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: table,
          filter: filter ? `${filter.column}=eq.${filter.value}` : undefined
        },
        (payload) => {
          switch (payload.eventType) {
            case 'INSERT':
              onInsert?.(payload.new)
              break
            case 'UPDATE':
              onUpdate?.(payload.new)
              break
            case 'DELETE':
              onDelete?.(payload.old)
              break
          }
        }
      )
      .subscribe()
    
    return () => {
      channel.unsubscribe()
    }
  }, [table, filter, onInsert, onUpdate, onDelete])
}
```

## Performance Best Practices

### 1. Throttle Cursor Updates
```tsx
import { throttle } from 'lodash'

const throttledUpdateCursor = throttle(updateCursor, 50) // Max 20 updates/second

useEffect(() => {
  const handleMouseMove = (e: MouseEvent) => {
    throttledUpdateCursor(e.clientX, e.clientY)
  }
  
  window.addEventListener('mousemove', handleMouseMove)
  return () => window.removeEventListener('mousemove', handleMouseMove)
}, [])
```

### 2. Connection Management
```tsx
// Singleton pattern for Realtime client
let realtimeClient: ReturnType<typeof createBrowserClient> | null = null

export function getRealtimeClient() {
  if (!realtimeClient) {
    realtimeClient = createRealtimeClient()
  }
  return realtimeClient
}
```

### 3. Cleanup on Unmount
Always unsubscribe from channels when components unmount to prevent memory leaks.

### 4. Error Handling
```tsx
channel.subscribe((status, err) => {
  if (status === 'SUBSCRIBED') {
    console.log('Connected to channel')
  } else if (status === 'CHANNEL_ERROR') {
    console.error('Channel error:', err)
    // Implement retry logic
  } else if (status === 'TIMED_OUT') {
    console.error('Connection timed out')
    // Reconnect
  }
})
```

## Security Considerations
- Use Row Level Security (RLS) for database changes
- Validate message content before broadcasting
- Implement rate limiting for chat messages
- Sanitize user input to prevent XSS
- Use presence keys that don't expose sensitive data

## Testing Realtime Features
```tsx
// Mock Realtime for testing
const mockChannel = {
  on: jest.fn().mockReturnThis(),
  subscribe: jest.fn().mockReturnThis(),
  unsubscribe: jest.fn(),
  track: jest.fn(),
  send: jest.fn()
}

jest.mock('@/lib/supabase/realtime-client', () => ({
  createRealtimeClient: () => ({
    channel: () => mockChannel
  })
}))
```
